{"version":3,"file":"static/js/370.64bf4d35.chunk.js","mappings":"wLAEA,MAOA,EAPkCA,EAAAA,KAAaC,MAAM,CACnDC,SAAUF,EAAAA,KACPG,IAAI,EAAG,oCACPC,IAAI,GAAI,qCACRC,SAAS,0BCId,EAVuBC,IACrB,MAAMC,EAAS,CAAC,EAMhB,OALKD,EAAOE,MAEA,2CAA2CC,KAAKH,EAAOE,SACjED,EAAOC,MAAQ,yBAFfD,EAAOC,MAAQ,oBAIVD,CAAM,E,sBCNf,QAAiC,8BAAjC,EAAuE,qBAAvE,EAAwG,yBAAxG,EAAqJ,iCAArJ,EAAwM,+BAAxM,EAA4P,kC,aCS5P,MAwCMG,EAAYC,IAAuB,IAAtB,aAAEC,GAAcD,EACjC,OACEE,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,UAAWC,EAAuBC,SAAA,EACtCC,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAkBC,UAChCC,EAAAA,EAAAA,KAACC,EAAAA,GAAK,CACJC,KAAM,QACNC,KAAM,OACNC,YAAa,QACbC,UAAWC,EAAAA,OAGfN,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAkBC,UAChCC,EAAAA,EAAAA,KAACC,EAAAA,GAAK,CACJC,KAAM,WACNC,KAAM,WACNC,YAAa,WACbC,UAAWC,EAAAA,OAGfX,EAAAA,EAAAA,MAAA,OAAKE,UAAWC,EAA0BC,SAAA,EACxCC,EAAAA,EAAAA,KAACC,EAAAA,GAAK,CAACE,KAAM,WAAYD,KAAM,aAAcK,GAAG,gBAChDP,EAAAA,EAAAA,KAAA,SAAOQ,QAAQ,aAAYT,SAAC,oBAE9BC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,UACEH,UAAWC,EACXK,KAAM,SACNM,SAAUf,EAAaK,SAEtBL,EAAe,gBAAkB,cAGjC,EAQX,GAAegB,EAAAA,EAAAA,KAJUC,IAAK,CAC5BC,OAAQD,EAAME,KAAKD,UAGmB,CAAEE,MAAM,MAAhD,EAhFeC,IACb,MAAMC,GAAWC,EAAAA,EAAAA,MAEjB,GAAIF,EAAMH,OACR,OAAOZ,EAAAA,EAAAA,KAACkB,EAAAA,GAAQ,CAACC,GAAI,aAcvB,OACEnB,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACoB,EAAAA,GAAM,CACLC,cAAe,CAAE/B,MAAO,GAAIN,SAAU,GAAIsC,YAAY,GACtDC,SAAUC,EACVC,iBAAkBC,EAClBC,SAjBeC,CAACxC,EAAMyC,KAAoC,IAAlC,cAAEC,EAAa,UAAEC,GAAWF,EACxDb,GACEF,EAAAA,EAAAA,IACE1B,EAAOE,MACPF,EAAOJ,SACPI,EAAOkC,WACPQ,EACAC,GAEH,EAQ0BhC,SAEtBiC,IAAA,IAAC,aAAEtC,EAAY,OAAEuC,GAAQD,EAAA,OACxBrC,EAAAA,EAAAA,MAAAuC,EAAAA,SAAA,CAAAnC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIH,UAAWC,EAAcC,SAAC,WAC9BC,EAAAA,EAAAA,KAACR,EAAS,CAACE,aAAcA,IACxBuC,IACCjC,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAA8BC,SAAEkC,MAEjD,KAGH,G,+CC7CV,QAA+B,oCAA/B,EAA2E,6BAA3E,EAAoH,iC,aCEpH,MAAME,EAAgBN,IAAgC,IAA/B,MAAEO,EAAK,KAAEC,KAAStB,GAAOc,EAC9C,MAAMS,EAAWD,EAAKE,QAAQH,EAAMlC,OAASmC,EAAKhD,OAAO+C,EAAMlC,MAE/D,OACEP,EAAAA,EAAAA,MAAA,OACEE,UACEC,EAA0B,KAAOwC,EAAWxC,EAAgB,IAC7DC,SAAA,EAEDC,EAAAA,EAAAA,KAAA,OAAAD,SAAMgB,EAAMhB,WACXuC,IAAYtC,EAAAA,EAAAA,KAAA,QAAAD,SAAOsC,EAAKhD,OAAO+C,EAAMlC,UAClC,EAIGsC,EAAYzB,IACvB,MAAM,MAAEqB,EAAK,KAAEC,EAAI,MAAEI,KAAUC,GAAc3B,EAC7C,OACEf,EAAAA,EAAAA,KAACmC,EAAa,IAAKpB,EAAKhB,UACtBC,EAAAA,EAAAA,KAAA,eAAcoC,KAAWM,KACX,EAIPpC,EAASS,IACpB,MAAM,MAAEqB,EAAK,KAAEC,EAAI,MAAEI,KAAUC,GAAc3B,EAC7C,OACEf,EAAAA,EAAAA,KAACmC,EAAa,IAAKpB,EAAKhB,UACtBC,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAkBC,UAChCC,EAAAA,EAAAA,KAAA,YAAWoC,KAAWM,OAEV,C","sources":["utils/validators/SchemaLoginForm.jsx","utils/validators/validators.js","webpack://social-network/./src/components/Login/Login.module.css?3530","components/Login/Login.jsx","webpack://social-network/./src/components/common/FormsControls/FormsControls.module.css?eb50","components/common/FormsControls/FormsControls.js"],"sourcesContent":["import * as Yup from \"yup\";\n\nconst validationSchemaLoginForm = Yup.object().shape({\n  password: Yup.string()\n    .min(5, \"Must be longer than 2 characters\")\n    .max(20, \"Must be shorter than 5 characters\")\n    .required(\"Password is required\")\n});\n\nexport default validationSchemaLoginForm;\n","const validateEmail = (values) => {\n  const errors = {};\n  if (!values.email) {\n    errors.email = \"Email is required\";\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\n    errors.email = \"Invalid email address\";\n  }\n  return errors;\n};\n\nexport default validateEmail;\n","// extracted by mini-css-extract-plugin\nexport default {\"loginContainer\":\"Login_loginContainer__qMsVL\",\"title\":\"Login_title__vcg8P\",\"formField\":\"Login_formField__TUCY4\",\"checkboxContainer\":\"Login_checkboxContainer__rbrCF\",\"loginButtonForm\":\"Login_loginButtonForm__L2Ms-\",\"form-summary-error\":\"Login_form-summary-error__WL0dN\"};","import React from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { Formik, Form, Field } from \"formik\";\nimport validationSchemaLoginForm from \"../../utils/validators/SchemaLoginForm\";\nimport validateEmail from \"../../utils/validators/validators\";\nimport { Input } from \"../common/FormsControls/FormsControls\";\nimport { login } from \"../Redux/AuthReducer\";\nimport classes from \"./Login.module.css\";\n\nconst Login = (props) => {\n  const dispatch = useDispatch();\n\n  if (props.isAuth) {\n    return <Navigate to={\"/profile\"} />;\n  }\n\n  const handleSubmit = (values, { setSubmitting, setStatus }) => {\n    dispatch(\n      login(\n        values.email,\n        values.password,\n        values.rememberMe,\n        setSubmitting,\n        setStatus\n      )\n    );\n  };\n  return (\n    <div>\n      <Formik\n        initialValues={{ email: \"\", password: \"\", rememberMe: false }}\n        validate={validateEmail}\n        validationSchema={validationSchemaLoginForm}\n        onSubmit={handleSubmit}\n      >\n        {({ isSubmitting, status }) => (\n          <>\n            <h1 className={classes.title}>Login</h1>\n            <LoginForm isSubmitting={isSubmitting} />\n            {status && (\n              <div className={classes[\"form-summary-error\"]}>{status}</div>\n            )}\n          </>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nconst LoginForm = ({ isSubmitting }) => {\n  return (\n    <Form className={classes.loginContainer}>\n      <div className={classes.formField}>\n        <Field\n          name={\"email\"}\n          type={\"text\"}\n          placeholder={\"Email\"}\n          component={Input}\n        />\n      </div>\n      <div className={classes.formField}>\n        <Field\n          name={\"password\"}\n          type={\"password\"}\n          placeholder={\"Password\"}\n          component={Input}\n        />\n      </div>\n      <div className={classes.checkboxContainer}>\n        <Field type={\"checkbox\"} name={\"rememberMe\"} id=\"rememberMe\" />\n        <label htmlFor=\"rememberMe\">Remember Me</label>\n      </div>\n      <div>\n        <button\n          className={classes.loginButtonForm}\n          type={\"submit\"}\n          disabled={isSubmitting}\n        >\n          {isSubmitting ? \"Logging in...\" : \"Login\"}\n        </button>\n      </div>\n    </Form>\n  );\n};\n\nconst mapStatetoProps = (state) => ({\n  isAuth: state.auth.isAuth\n});\n\nexport default connect(mapStatetoProps, { login })(Login);\n","// extracted by mini-css-extract-plugin\nexport default {\"form-control\":\"FormsControls_form-control__KOICr\",\"error\":\"FormsControls_error__wukgD\",\"formField\":\"FormsControls_formField__Z4Rfv\"};","import React from \"react\";\nimport classes from \"./FormsControls.module.css\";\n\nconst FormsControls = ({ field, form, ...props }) => {\n  const hasError = form.touched[field.name] && form.errors[field.name];\n\n  return (\n    <div\n      className={\n        classes[\"form-control\"] + \" \" + (hasError ? classes.error : \"\")\n      }\n    >\n      <div>{props.children}</div>\n      {hasError && <span>{form.errors[field.name]}</span>}\n    </div>\n  );\n};\n\nexport const Textarea = (props) => {\n  const { field, form, child, ...restProps } = props;\n  return (\n    <FormsControls {...props}>\n      <textarea {...field} {...restProps} />\n    </FormsControls>\n  );\n};\n\nexport const Input = (props) => {\n  const { field, form, child, ...restProps } = props;\n  return (\n    <FormsControls {...props}>\n      <div className={classes.formField}>\n        <input {...field} {...restProps} />\n      </div>\n    </FormsControls>\n  );\n};\n"],"names":["Yup","shape","password","min","max","required","values","errors","email","test","LoginForm","_ref3","isSubmitting","_jsxs","Form","className","classes","children","_jsx","Field","name","type","placeholder","component","Input","id","htmlFor","disabled","connect","state","isAuth","auth","login","props","dispatch","useDispatch","Navigate","to","Formik","initialValues","rememberMe","validate","validateEmail","validationSchema","validationSchemaLoginForm","onSubmit","handleSubmit","_ref","setSubmitting","setStatus","_ref2","status","_Fragment","FormsControls","field","form","hasError","touched","Textarea","child","restProps"],"sourceRoot":""}